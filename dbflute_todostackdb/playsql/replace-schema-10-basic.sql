

/* Create Tables */

CREATE TABLE MEMBER
(
	MEMBER_ID BIGINT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '会員ID : 会員ID',
	MEMBER_ACCOUNT VARCHAR(100) NOT NULL COMMENT '会員アカウント : 会員アカウント',
	E_MAIL VARCHAR(216) NOT NULL UNIQUE COMMENT 'Eメール : Eメールアドレス',
	REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時 : レコードが登録された日時',
	REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザー : レコードを登録したユーザー',
	UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時 : レコードが(最後に)更新された日時',
	UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザー : レコードを(最後に)更新したユーザー',
	VERSION_NO BIGINT NOT NULL COMMENT 'バージョン番号 : 排他制御用、更新されるごとにインクリメントされる',
	PRIMARY KEY (MEMBER_ID)
) COMMENT = '会員 : 会員のプロフィールやアカウントなどの基本情報を保持する。基本的に物理削除はなく、退会したらステータスが退会会員になる。ライフサイクルやカテゴリの違う会員情報は、one-to-oneなどの関連テーブルにて。';


CREATE TABLE MEMBER_SECURITY
(
	MEMBER_ID BIGINT UNSIGNED NOT NULL COMMENT '会員ID : そのまま one-to-one を構成するためのFKとなる。',
	LOGIN_PASSWORD VARCHAR(100) NOT NULL COMMENT 'ログインパスワード : ログイン時に利用するパスワード。本当は良くないが、Exampleなのでひとまず暗号化していない。',
	REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時 : レコードが登録された日時',
	REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザー : レコードを登録したユーザー',
	UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時 : レコードが(最後に)更新された日時',
	UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザー : レコードを(最後に)更新したユーザー',
	VERSION_NO BIGINT NOT NULL COMMENT 'バージョン番号 : 排他制御用、更新されるごとにインクリメントされる',
	PRIMARY KEY (MEMBER_ID)
) COMMENT = '会員セキュリティ : 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある';


CREATE TABLE TASK
(
	TASK_ID BIGINT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'タスクID : タスクID',
	MEMBER_ID BIGINT UNSIGNED NOT NULL COMMENT '会員ID : 会員ID',
	TASK_DETAIL TEXT NOT NULL COMMENT 'タスク詳細 : タスク詳細',
	DISPLAY_NUM BIGINT NOT NULL COMMENT '表示順 : 表示順。タスクの数だけあるので、bigint。',
	DONE_FLG CHAR(1) NOT NULL COMMENT '完了フラグ : 完了フラグ',
	REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時 : レコードが登録された日時',
	REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザー : レコードを登録したユーザー',
	UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時 : レコードが(最後に)更新された日時',
	UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザー : レコードを(最後に)更新したユーザー',
	VERSION_NO BIGINT NOT NULL COMMENT 'バージョン番号 : 排他制御用、更新されるごとにインクリメントされる',
	PRIMARY KEY (TASK_ID),
	CONSTRAINT UQ_TASK_ID_DISPLAY_NUM UNIQUE (TASK_ID, DISPLAY_NUM)
) COMMENT = 'タスク';


CREATE TABLE TASK_WORK
(
	TASK_WORK_ID BIGINT NOT NULL AUTO_INCREMENT COMMENT 'タスク作業ID : タスク作業ID。作業を開始するごとに生まれるのでbigint。',
	TASK_ID BIGINT UNSIGNED NOT NULL COMMENT 'タスクID : タスクID',
	START_TM DATETIME NOT NULL COMMENT '開始時間 : 開始時間',
	END_TM DATETIME NOT NULL COMMENT '終了時間 : 終了時間',
	REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時 : レコードが登録された日時',
	REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザー : レコードを登録したユーザー',
	UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時 : レコードが(最後に)更新された日時',
	UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザー : レコードを(最後に)更新したユーザー',
	PRIMARY KEY (TASK_WORK_ID)
) COMMENT = 'タスク作業';



/* Create Indexes */

CREATE INDEX IX_DISPLAY_NUM USING BTREE ON TASK (DISPLAY_NUM ASC);



/* Create Foreign Keys */

ALTER TABLE MEMBER_SECURITY
	ADD CONSTRAINT FK_MEMBER_SECURITY_MEMBER FOREIGN KEY (MEMBER_ID)
	REFERENCES MEMBER (MEMBER_ID)
	ON UPDATE NO ACTION
	ON DELETE NO ACTION
;


ALTER TABLE TASK
	ADD FOREIGN KEY (MEMBER_ID)
	REFERENCES MEMBER (MEMBER_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE TASK_WORK
	ADD FOREIGN KEY (TASK_ID)
	REFERENCES TASK (TASK_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



